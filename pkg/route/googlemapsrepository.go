package route

import (
	"context"
	"fmt"
	"strconv"

	"azure.com/ecovo/trip-search-service/pkg/entity"
	"googlemaps.github.io/maps"
)

// GoogleMapsRepository structure
type GoogleMapsRepository struct {
	client *maps.Client
}

// NewGoogleMapsRepository creates the repository
func NewGoogleMapsRepository(client *maps.Client) (Repository, error) {
	if client == nil {
		return nil, fmt.Errorf("route.GoogleRepository: client is nil")
	}

	return &GoogleMapsRepository{
		client: client,
	}, nil
}

// GetRoute returns the route generated by Google Maps based on a trip
func (gr *GoogleMapsRepository) GetRoute(t *entity.Trip) (maps.Route, error) {
	var wp = make([]string, len(t.Stops))
	for i, s := range t.Stops {
		wp[i] = s.Point.String()
	}

	var dr *maps.DirectionsRequest

	if !t.LeaveAt.IsZero() {
		dr = &maps.DirectionsRequest{
			Origin:        t.Stops[0].Point.String(),
			Destination:   t.Stops[len(t.Stops)-1].Point.String(),
			Waypoints:     wp,
			DepartureTime: strconv.FormatInt(t.LeaveAt.Unix(), 10),
		}
	} else {
		return maps.Route{}, fmt.Errorf("trip.GoogleMapsRepository: leaveAt must be specified")
	}

	r, _, err := gr.client.Directions(context.Background(), dr)
	if err != nil {
		return maps.Route{}, fmt.Errorf("trip.GoogleMapsRepository: error getting directions, %s", err)
	}

	if len(r) > 0 {
		return r[0], nil
	}

	return maps.Route{}, fmt.Errorf("trip.GoogleMapsRepository: no trips found in google map repository")
}
